import streamlit as st
from openai import OpenAI
from datetime import datetime

# Configurar cliente OpenAI usando secrets do Streamlit
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

def refinar_texto_com_openai(texto):
    """Fun√ß√£o para refinar o texto usando OpenAI GPT"""
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": "Voc√™ √© um assistente especializado em corre√ß√£o gramatical, coes√£o e coer√™ncia de textos oficiais da Pol√≠cia Militar. Corrija apenas erros gramaticais, melhore a coes√£o e coer√™ncia do texto, mantendo o formato original e o tom formal. N√£o altere informa√ß√µes factuais ou dados espec√≠ficos."
                },
                {
                    "role": "user",
                    "content": f"Por favor, corrija este relat√≥rio policial mantendo todas as informa√ß√µes originais, apenas melhorando a gram√°tica, coes√£o e coer√™ncia:\n\n{texto}"
                }
            ],
            max_tokens=2000,
            temperature=0.3
        )
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Erro ao conectar com OpenAI: {str(e)}")
        return texto

def gerar_historico(dados):
    """Fun√ß√£o para gerar o hist√≥rico baseado no template"""
    
    # Template base
    template = f"""Em atendimento √† Ordem de Servi√ßo, vinculada ao Programa de Seguran√ßa Rural no Vale do Jamari, foi realizada uma visita t√©cnica em {dados['data']}, com in√≠cio √†s {dados['hora_inicio']} e t√©rmino √†s {dados['hora_fim']}. A dilig√™ncia ocorreu na propriedade rural denominada {dados['tipo_propriedade']} "{dados['nome_propriedade']}", situada em {dados['endereco']}, na Zona Rural do munic√≠pio de {dados['municipio']}/{dados['uf']}. Procedeu-se ao levantamento das coordenadas geogr√°ficas, sendo a porteira de acesso principal localizada em {dados['lat_long_porteira']}, e a sede/resid√™ncia principal em {dados['lat_long_sede']}. A √°rea total da propriedade compreende {dados['area']} {dados['unidade_area']}. O propriet√°rio, Sr. "{dados['nome_proprietario']}", inscrito no CPF/CNPJ sob o n¬∫ "{dados['cpf_cnpj']}", com contato telef√¥nico principal "{dados['telefone']}", esteve presente durante a visita. A principal atividade econ√¥mica desenvolvida no local √© "{dados['atividade_principal']}"."""
    
    # Adicionar informa√ß√£o sobre ve√≠culos apenas se houver
    if dados['veiculos']:
        template += f" Foram identificados os seguintes ve√≠culos automotores na propriedade: {dados['veiculos']}."
    
    # Adicionar informa√ß√£o sobre rebanho apenas se houver marca de gado
    if dados['marca_gado']:
        template += f" O rebanho possui marca/sinal/ferro registrado como \"{dados['marca_gado']}\"."
    
    template += f""" A visita teve como objetivo central o cadastro e georreferenciamento da propriedade no sistema do Programa de Seguran√ßa Rural, o que foi efetivado. Consequentemente, foi afixada a placa de identifica√ß√£o do programa, de n¬∫ "{dados['numero_placa']}", entregue via m√≠dia digital. Adicionalmente, foram repassadas ao propriet√°rio orienta√ß√µes concernentes ao programa mencionado, a fim de sanar as d√∫vidas existentes. A presente visita cumpriu os objetivos estabelecidos pela referida Ordem de Servi√ßo, sendo as informa√ß√µes coletadas e registradas com base nas declara√ß√µes do propriet√°rio e na verifica√ß√£o in loco."""
    
    return template

def main():
    st.set_page_config(
        page_title="Gerador de Hist√≥rico Policial - Seguran√ßa Rural",
        page_icon="üöî",
        layout="wide"
    )
    
    st.title("üöî Gerador de Hist√≥rico Policial")
    st.subheader("Programa de Seguran√ßa Rural - Vale do Jamari")
    
    # Verificar se a API Key est√° configurada
    if "OPENAI_API_KEY" not in st.secrets:
        st.error("‚ö†Ô∏è API Key da OpenAI n√£o configurada! Configure no arquivo .streamlit/secrets.toml")
        st.stop()
    
    # Sidebar com instru√ß√µes
    with st.sidebar:
        st.header("üìã Instru√ß√µes")
        st.write("1. Preencha todos os campos obrigat√≥rios")
        st.write("2. Marque se existe marca de gado registrada")
        st.write("3. Clique em 'Gerar Hist√≥rico'")
        st.write("4. O texto ser√° refinado automaticamente")
        st.write("5. Copie o resultado final")
    
    # Formul√°rio principal
    with st.form("formulario_historico"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.header("üìÖ Dados da Visita")
            data = st.date_input("Data da visita")
            hora_inicio = st.time_input("Hora de in√≠cio")
            hora_fim = st.time_input("Hora de t√©rmino")
            
            st.header("üè† Dados da Propriedade")
            tipo_propriedade = st.selectbox("Tipo de propriedade", ["S√≠tio", "Fazenda", "Ch√°cara", "Est√¢ncia"])
            nome_propriedade = st.text_input("Nome da propriedade", placeholder="Ex: S√£o Jos√©")
            endereco = st.text_area("Endere√ßo completo", placeholder="Inclua refer√™ncias se houver")
            municipio = st.text_input("Munic√≠pio")
            uf = st.selectbox("UF", ["RO", "AC", "AM", "RR", "PA", "TO", "MT", "MS", "GO", "DF"])
            
        with col2:
            st.header("üìç Coordenadas GPS")
            lat_long_porteira = st.text_input("Coordenadas da porteira (Lat, Long)", placeholder="Ex: -9.897289, -63.017788")
            lat_long_sede = st.text_input("Coordenadas da sede (Lat, Long)", placeholder="Ex: -9.897500, -63.017900")
            
            st.header("üìè √Årea e Propriet√°rio")
            area = st.number_input("√Årea da propriedade", min_value=0.0, step=0.1)
            unidade_area = st.selectbox("Unidade", ["hectares", "alqueires"])
            nome_proprietario = st.text_input("Nome do propriet√°rio")
            cpf_cnpj = st.text_input("CPF/CNPJ", placeholder="000.000.000-00 ou 00.000.000/0000-00")
            telefone = st.text_input("Telefone", placeholder="(69) 99999-9999")
        
        st.header("üíº Atividade Econ√¥mica")
        atividade_principal = st.text_input("Atividade principal", placeholder="Ex: Cria√ß√£o de bovinos")
        
        st.header("üöó Ve√≠culos (Opcional)")
        veiculos = st.text_area("Descri√ß√£o dos ve√≠culos", 
                               placeholder="Ex: uma caminhonete marca Ford, modelo Ranger, placa ABC-1234, cor Prata; um trator marca Massey Ferguson, modelo 265, sem placa, cor Vermelha")
        
        st.header("üêÑ Rebanho")
        marca_gado = st.text_input("Marca/sinal/ferro registrado (Opcional)", 
                                  placeholder="Ex: JB na paleta esquerda")
        
        st.header("üè∑Ô∏è Placa de Identifica√ß√£o")
        numero_placa = st.text_input("N√∫mero da placa", placeholder="Ex: PSR-001")
        
        # Bot√£o de submiss√£o
        submitted = st.form_submit_button("üöÄ Gerar Hist√≥rico", use_container_width=True)
        
        if submitted:
            # Validar campos obrigat√≥rios
            campos_obrigatorios = [
                data, hora_inicio, hora_fim, nome_propriedade, endereco,
                municipio, lat_long_porteira, lat_long_sede,
                area, nome_proprietario, cpf_cnpj, telefone, atividade_principal,
                numero_placa
            ]
            
            if not all(campos_obrigatorios):
                st.error("‚ùå Por favor, preencha todos os campos obrigat√≥rios!")
                return
            
            # Preparar dados
            dados = {
                'data': data.strftime("%d/%m/%Y"),
                'hora_inicio': hora_inicio.strftime("%H:%M"),
                'hora_fim': hora_fim.strftime("%H:%M"),
                'tipo_propriedade': tipo_propriedade,
                'nome_propriedade': nome_propriedade,
                'endereco': endereco,
                'municipio': municipio,
                'uf': uf,
                'lat_long_porteira': lat_long_porteira,
                'lat_long_sede': lat_long_sede,
                'area': str(area),
                'unidade_area': unidade_area,
                'nome_proprietario': nome_proprietario,
                'cpf_cnpj': cpf_cnpj,
                'telefone': telefone,
                'atividade_principal': atividade_principal,
                'veiculos': veiculos,
                'marca_gado': marca_gado,
                'numero_placa': numero_placa
            }
            
            # Gerar hist√≥rico
            with st.spinner("üîÑ Gerando hist√≥rico..."):
                historico_bruto = gerar_historico(dados)
            
            # Refinar com OpenAI
            with st.spinner("‚ú® Refinando texto com IA..."):
                historico_refinado = refinar_texto_com_openai(historico_bruto)
            
            # Exibir resultado
            st.success("‚úÖ Hist√≥rico gerado com sucesso!")
            
            st.header("üìÑ Hist√≥rico Final")
            st.text_area("Copie o texto abaixo:", value=historico_refinado, height=400)
            
            # Bot√£o para copiar
            st.code(historico_refinado, language=None)

if __name__ == "__main__":
    main()